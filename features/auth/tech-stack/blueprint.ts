/**
 * Auth Feature Technology Stack Blueprint
 * 
 * This blueprint automatically adds the technology-agnostic stack layer
 * (types, schemas, hooks, stores) to any Auth implementation.
 * 
 * This ensures consistency across all frontend/backend technologies.
 */

import { BlueprintAction, BlueprintActionType, ConflictResolutionStrategy } from '@thearchitech.xyz/types';
import { TypedMergedConfiguration, extractTypedModuleParameters } from '../../../types/blueprint-config-types.js';

export default function generateBlueprint(
  config: TypedMergedConfiguration<'features/auth/tech-stack'>
): BlueprintAction[] {
  const actions: BlueprintAction[] = [];
  
  // Extract module parameters for cleaner access
  const { params, features } = extractTypedModuleParameters(config);
  
  // ============================================================================
  // TECHNOLOGY STACK LAYER DEPENDENCIES
  // ============================================================================
  
  // Install tech-stack layer dependencies
  actions.push({
    type: BlueprintActionType.INSTALL_PACKAGES,
    packages: [
      'zod',
      '@tanstack/react-query',
      'zustand',
      'immer',
      'sonner'
    ]
  });
  
  // ============================================================================
  // TECHNOLOGY STACK LAYER FILES
  // ============================================================================
  
  // Types - Re-exported from contract (single source of truth)
  actions.push({
    type: BlueprintActionType.CREATE_FILE,
    path: '{{paths.lib}}/auth/types.ts',
    content: `/**
 * Auth Types
 * Re-exported from contract for convenience
 */
export type { 
  User, Session, ConnectedAccount, TwoFactorSecret, Organization, Team, Member, TeamMember, Invitation, TeamInvitation,
  SignInData, SignUpData, SignInResult, SignUpResult, SessionResult, PasswordResetData, UpdateProfileData,
  AuthStatus, OAuthProvider, SessionStatus, TwoFactorMethod,
  IAuthService
} from '@/features/auth/contract';
`,
    conflictResolution: {
      strategy: ConflictResolutionStrategy.SKIP,
      priority: 0
    }
  });
  
  // NOTE: Schemas are backend-specific and generated by the backend implementation
  // (e.g., better-auth-nextjs) based on the ORM/database structure.
  // This ensures schemas match the exact database types (UUID vs string IDs, etc.)
  
  // Service - Cohesive Services (wraps backend with TanStack Query)
  actions.push({
    type: BlueprintActionType.CREATE_FILE,
    path: '{{paths.lib}}/auth/AuthService.ts',
    template: 'templates/AuthService.ts.tpl',
    conflictResolution: {
      strategy: ConflictResolutionStrategy.REPLACE,
      priority: 1
    }
  });
  
  // Stores - Zustand state management (tech-agnostic UI state)
  actions.push({
    type: BlueprintActionType.CREATE_FILE,
    path: '{{paths.lib}}/auth/stores.ts',
    template: 'templates/stores.ts.tpl',
    conflictResolution: {
      strategy: ConflictResolutionStrategy.SKIP,
      priority: 0
    }
  });
  
  // ============================================================================
  // UTILITY FILES
  // ============================================================================
  
  // Index file for easy imports
  actions.push({
    type: BlueprintActionType.CREATE_FILE,
    path: '{{paths.lib}}/auth/index.ts',
    content: `/**
 * Auth Feature - Tech Stack Layer
 * 
 * This module provides the client-side abstraction layer for authentication.
 * Import the AuthService to access all auth-related operations.
 */

// Re-export types from contract
export * from './types';

// Re-export schemas for validation
export * from './schemas';

// Re-export Zustand stores
export * from './stores';

// Export the main Cohesive Service
export { AuthService } from './AuthService';
`,
    conflictResolution: {
      strategy: ConflictResolutionStrategy.REPLACE,
      priority: 1
    }
  });
  
  return actions;
}
